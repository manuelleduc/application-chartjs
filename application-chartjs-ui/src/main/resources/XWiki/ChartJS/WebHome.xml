<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.ChartJS.WebHome" locale="">
  <web>XWiki.ChartJS</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1501507032000</creationDate>
  <parent>xwiki:XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1501586945000</date>
  <contentUpdateDate>1501509167000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>== Description ==

Creates various types of charts using [[Chart.js&gt;&gt;http://www.chartjs.org/]].

=== Usage ===

{{code language="none"}}
{{chartjs type="..." options="{...}"}}
{
  "labels": [...],
  "datasets": [...]
}
{{/chartjs}}
{{/code}}

=== Parameters ===

{{velocity}}
#set ($parameters = $doc.getObjects('XWiki.WikiMacroParameterClass'))
#set ($headers = '|=Name|=Description|=Mandatory|=Default')
#set ($body = '')
#foreach ($parameter in $parameters)
#set ($isMandatory = ${parameter.getProperty('mandatory').value})
#if ($isMandatory == 1) #set ($isMandatory = "Yes") #else #set ($isMandatory = "No") #end
#set ($body = "$body|${parameter.getProperty('name').value}|(((${parameter.getProperty('description').value})))|$isMandatory|$parameter.getProperty('defaultValue').value
")
#end
## This option is handy for generating the code to be pasted to the online extension.xwiki.org page for documenting the parameters statically (i.e. without having the macro object attached to the page).
#if ($request.debug)
{{code}}
$headers
$body
{{/code}}
#end

$headers
$body
{{/velocity}}

=== Examples ===
{{velocity filter="none"}}
#set ($horizontalBarCode = '{{chartjs type="horizontalBar" id="ckeditor-diagram-issues" title="CKEditor and Diagram Issues"
  options=''{"tooltips": {"position": {"left": 0.3}}, "width": "600px", "height": "400px", "maintainAspectRatio": false}''}}
{
  "labels": [
    "Bug",
    "Improvement",
    "New Feature"
  ],
  "datasets": [{
    "label": "CKEditor",
    "data": [23, 17, 5],
    "backgroundColor": "#ff16e8"
  }, {
    "label": "Diagram",
    "data": [34, 11, 6],
    "backgroundColor": "#0018f4"
  }]
}
{{/chartjs}}')

#set ($pieSingleDataSetCode = '{{chartjs type="pie" id="pie-1" title="Issues"
  options=''{
      "backgroundColors": ["#ff16e8", "#0018f4","#065d00"],
      "legend": {"display": false},
      "layout": {
        "padding": {
          "left": 50,
          "right": 50,
          "top": 50,
          "bottom": 50
        }
      },
      "plugins": {
        "datalabels": {
          "anchor":"end",
          "align": "end",
          "includeLegend":true
        }
      }}''}}
{
  "labels": [
    "Bug",
    "Improvement",
    "New Feature"
  ],
  "datasets": [{
    "label": "CKEditor",
    "data": [23, 17, 5]
  }]
}
{{/chartjs}}')

#set ($pieMultipleDataSetsCode = '{{chartjs type="pie" options="{~"backgroundColors~": [~"#ff16e8~", ~"#0018f4~", ~"#065d00~"]}"}}
{
  "labels": [
    "Bug",
    "Improvement",
    "New Feature"
  ],
  "datasets": [{
    "label": "CKEditor",
    "data": [23, 17, 5]
  }, {
    "label": "Diagram",
    "data": [34, 11, 6]
  }]
}
{{/chartjs}}')

#set ($mirroredHistogramWithLongLabelsCode ='{{chartjs type="horizontalBar" options=''{
  "backgroundColors": ["#ff16e8", "#0018f4","#065d00"],
  "legend": {"display": false},
  "afterValue": "%",
  "scales": {
    "yAxes": [{
      "barThickness": 20,
      "maxBarThickness": 20,
      "ticks": { "mirror": true, "padding": -5, "labelOffset": -20, "fontColor": "#000", "fontSize": 14}
    }],
    "xAxes": [{"ticks": {"beginAtZero": true, "stepValue": 10, "max": 100, "afterValue": "%"}}]
  },
  "tooltips": {"maxCharactersPerLine": 50}
}
''}}
{
  "labels": [
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
    "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
    "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  ],
  "datasets": [{
    "label": "Lorem ipsum",
    "data": [23, 47, 30]
  }]
}
{{/chartjs}}')

{{/velocity}}

{{velocity}}
(% class="row" %)(((
  (% class="col-xs-12 col-sm-6 col-md-7" %)(((
    {{code language="none"}}
    $horizontalBarCode
    {{/code}}
  )))
  (% class="col-xs-12 col-sm-6 col-md-5" %)(((
    $horizontalBarCode
  )))
)))
(% class="row" %)(((
  (% class="col-xs-12 col-sm-6 col-md-7" %)(((
    {{code language="none"}}
    $pieSingleDataSetCode
    {{/code}}
  )))
  (% class="col-xs-12 col-sm-6 col-md-5" %)(((
    $pieSingleDataSetCode
  )))
)))
(% class="row" %)(((
  (% class="col-xs-12 col-sm-6 col-md-7" %)(((
    {{code language="none"}}
    $pieMultipleDataSetsCode
    {{/code}}
  )))
  (% class="col-xs-12 col-sm-6 col-md-5" %)(((
    $pieMultipleDataSetsCode
  )))
)))
(% class="row" %)(((
  (% class="col-xs-12 col-sm-6 col-md-7" %)(((
    {{code language="none"}}
    $mirroredHistogramWithLongLabelsCode
    {{/code}}
  )))
  (% class="col-xs-12 col-sm-6 col-md-5" %)(((
    $mirroredHistogramWithLongLabelsCode
  )))
)))
{{/velocity}}


</content>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>404a33b8-b5de-4d9e-86e3-749bbfa89545</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    chart: "$services.webjars.url('org.webjars:chartjs', 'Chart.bundle.min.js')",
    datalabels: "$services.webjars.url('org.webjars.npm:chartjs-plugin-datalabels', 'dist/chartjs-plugin-datalabels.min.js')",
    palette: "$services.webjars.url('org.xwiki.contrib:application-chartjs-webjar', 'palette.min.js')"
  },
  map: {
    datalabels: {
      "chart.js": "chart"
    }
  },
  shim: {
    palette: {
      exports: 'palette'
    }
  }
});

require(['jquery', 'chart', 'datalabels', 'palette'], function($, Chart, datalabels, palette) {
  var chartTypesWithBackgroundColorPerDataSet = ['line', 'bar', 'horizontalBar', 'radar'];

  var getData = function(canvas, options) {
    var deferred = $.Deferred();
    var data;
    try {
      data = JSON.parse(canvas.attr('data-source') || '{}');
    } catch (exception) {
      deferred.reject(exception);
    }
    if (data) {
      if (data.table &amp;&amp; $('table#' + data.table).length &gt; 0) {
        data = readDataFromTable(data, options);
      }
      deferred.resolve(data);
    }
    return deferred.promise();
  };

  var configureColors = function(data, options, type) {

    var opacity = options.opacity || 0.8;

    var defaultDataSetBackgroundColors = palette('tol', data.datasets.length).map(function(hex) {
      return convertHex(hex, opacity);
    });

    data.datasets.forEach(function(dataSet, index) {
      if (!dataSet.backgroundColor || dataSet.backgroundColor.length == 0) {
        if (chartTypesWithBackgroundColorPerDataSet.indexOf(type) &gt;= 0) {
          if (options.backgroundColors) {
            // Either one color per dataset or, if the number of datasets is the same as the number of
            // colors, otherwise one color per value.
            if (data.datasets.length == options.backgroundColors.length) {
              // One color per dataset, from the options.
              dataSet.backgroundColor = convertHex(options.backgroundColors[index].substring(1), opacity);
            } else {
              // One color per value, from the options.
              dataSet.backgroundColor = options.backgroundColors.map(function(hex) {
                return convertHex(hex.substring(1), opacity);
              });
            }
          } else {
            // One color per data set, generated with tol.
            dataSet.backgroundColor = defaultDataSetBackgroundColors[index];
          }

        } else {
          if (options.backgroundColors) {
            // One background color per value, from the options.
            dataSet.backgroundColor = options.backgroundColors.map(function(hex) {
              return convertHex(hex.substring(1), opacity);
            });
          } else {
            // One background color per value, generated with the palette.
            dataSet.backgroundColor = palette('tol', dataSet.data.length).map(function(hex) {
                return convertHex(hex, opacity);
              }
            );
          }
        }
      } else {
        // Each dataset backgroundColor can be either a literal or an array
        if (Array.isArray(dataSet.backgroundColor)) {
          dataSet.backgroundColor = dataSet.backgroundColor.map(function(hex) {
            return convertHex(hex.substring(1), opacity);
          });
        } else {
          dataSet.backgroundColor = convertHex(dataSet.backgroundColor.substring(1), opacity);
        }
      }
      // configure border colors as well
      if (!dataSet.borderColor || dataSet.borderColor.length == 0) {
        if (chartTypesWithBackgroundColorPerDataSet.indexOf(type) &gt;= 0) {
          if (options.borderColors) {
            // Either one color per dataset or, if the number of datasets is the same as the number of
            // colors, otherwise one color per value.
            if (data.datasets.length == options.borderColors.length) {
              // One color per dataset, from the options.
              dataSet.borderColor = convertHex(options.borderColors[index].substring(1), opacity);
            } else {
              // One color per value, from the options.
              dataSet.borderColor = options.borderColors.map(function(hex) {
                return convertHex(hex.substring(1), opacity);
              });
            }
          }
        } else {
          if (options.borderColors) {
            // One background color per value, from the options.
            dataSet.borderColor = options.borderColors.map(function(hex) {
              return convertHex(hex.substring(1), opacity);
            });
          }
        }
      }
      // configure border width
      if (!dataSet.borderWidth || dataSet.borderWidth.length == 0) {
        if (options.borderWidths) {
          // Either one border witdth per dataset or, if the number of datasets is the same as the number of
          // borders, otherwise one border per value.
          if (data.datasets.length == options.borderWidths.length) {
            // One border width per dataset, from the options.
            dataSet.borderWidth = options.borderWidths[index];
          } else {
            // One border width for all datasets, from the options.
            dataSet.borderWidth = options.borderWidths;
          }
        }
      }
    });

    return data;
  };

  var convertHex = function(hex, opacity) {
    r = parseInt(hex.substring(0,2), 16);
    g = parseInt(hex.substring(2,4), 16);
    b = parseInt(hex.substring(4,6), 16);
    return 'rgba(' + r + ',' + g + ',' + b + ',' + opacity + ')';
  };

  // Removes 0 values from the datasets, the corresponding colors and the labels.
  var maybeSkipZeros = function(data, options, type) {
    if (options.skipZeros) {
      // Compute the indices for which all datasets value is zero.
      var zeroIndices = {}
      data.datasets.forEach(function(dataSet, index) {
        dataSet.data.forEach(function(value, valueIndex) {
          var isZero = (zeroIndices[valueIndex] == undefined || zeroIndices[valueIndex]) &amp;&amp; (value == undefined || value == 0);
          zeroIndices[valueIndex] = isZero;
        });
      });

      var newLabels = [];
      data.datasets.forEach(function(dataSet, index) {
        var newData = [];
        var newBackgroundColors = [];
        dataSet.data.forEach(function(value, valueIndex) {
          if (!zeroIndices[valueIndex]) {
            // Compute the new labels only once, i.e. for the first dataset.
            if (index == 0) {
              newLabels.push(data.labels[valueIndex]);
            }
            newData.push(value);
            if (chartTypesWithBackgroundColorPerDataSet.indexOf(type) &gt;= 0) {
              if (options.backgroundColors) {
                if (data.datasets.length == options.backgroundColors.length) {
                  // One color per dataset
                  newBackgroundColors = options.backgroundColors;
                } else {
                  // One color per value, pick the one corresponding to the current valueIndex
                  newBackgroundColors.push(options.backgroundColors[valueIndex]);
                }
              }
            } else if (options.backgroundColors) {
              // One color per value, pick the one corresponding to the current valueIndex
              newBackgroundColors.push(options.backgroundColors[valueIndex]);
            }
          }
        });
        dataSet.data = newData;
        options.backgroundColors = newBackgroundColors;
      });
      data.labels = newLabels;
    }
    return data;
  }

  var readDataFromTable = function(data, options) {
    var labels = [];
    var dataSets = [];
    var rows = $('table#' + data.table + ' tr');

    // In case there is an "afterValue" sign and the value contains this sign, remove it because
    // only numeric values are expected for the chart data.
    function maybeRemoveAfterValue(value) {
      if (options.afterValue) {
        var idx = value.indexOf(options.afterValue)
        if (idx &gt; 0) {
          value = value.substring(0, idx).trim()
        }
      }
      return value
    }

    if (data.multipleDataSets) {
      if (data.dataSetLabel) {
        var dataSetsByLabel = {};
        rows.each(function() {
          var cells = $(this).children('td');
          if (cells.length &lt; 3) {
            return;
          }
          var label = cells.first().text().trim();
          if (labels.indexOf(label) &lt; 0) {
            labels.push(label);
          }
          var dataSetLabel = $(cells[data.dataSetLabel]).text().trim();
          var dataSet = dataSetsByLabel[dataSetLabel];
          if (!dataSet) {
            dataSet = {
              label: dataSetLabel,
              data: []
            }
            dataSetsByLabel[dataSetLabel] = dataSet;
          }
          var values = [];
          for (var i = 1; i &lt; cells.length; i++) {
            var value = $(cells[i]).text().trim();
            value = maybeRemoveAfterValue(value)
            if ($.isNumeric(value) &amp;&amp; i != data.dataSetLabel) {
              values.push(value);
            }
          }
          if (values.length == 1) {
            dataSet.data.push(values[0]);
          } else {
            dataSet.data.push(values);
          }
        });
        for (var dataSetLabel in dataSetsByLabel) {
          if (dataSetsByLabel.hasOwnProperty(dataSetLabel)) {
            dataSets.push(dataSetsByLabel[dataSetLabel]);
          }
        }
      } else {
        rows.each(function() {
          var cells = $(this).children('td');
          if (cells.length &lt; 3) {
            return;
          }
          var label = cells.first().text().trim();
          labels.push(label);
          for (var i = 1, dataSetIndex = 0; i &lt; cells.length; i++) {
            var value = $(cells[i]).text().trim();
            value = maybeRemoveAfterValue(value)
            if ($.isNumeric(value)) {
              var dataSet = dataSets[dataSetIndex];
              if (!dataSet) {
                dataSet = {
                  label: $(rows.first().find('th')[i]).text().trim(),
                  data: []
                };
                dataSets.push(dataSet);
              }
              dataSet.data.push(value);
              dataSetIndex++;
            }
          }
        });
      }
    } else {
      var dataSet = {
        label: $(rows.first().find('th')[1]).text().trim(),
        data: []
      };
      rows.each(function() {
        var cells = $(this).children('td');
        if (cells.length &lt; 2) {
          return;
        }
        var label = cells.first().text().trim();
        var values = [];
        for (var i = 1; i &lt; cells.length; i++) {
          var value = $(cells[i]).text().trim();
          value = maybeRemoveAfterValue(value)
          if ($.isNumeric(value)) {
            values.push(value);
          }
        }
        labels.push(label);
        if (values.length == 1) {
          dataSet.data.push(values[0]);
        } else {
          dataSet.data.push(values);
        }
      });
      dataSets.push(dataSet);
    }
    return {
      labels: labels,
      datasets: dataSets,
      table: data.table
    };
  };

  var createChart = function(canvas) {
    var type = canvas.attr('data-type');

    var options = {};
    try {
      var json = canvas.attr('data-options');
      options = JSON.parse(json || '{}');
    } catch (exception) {
      console.log(exception)
    }

    return getData(canvas, options).then(function(data) {
      return maybeSkipZeros(data, options, type);
    }).done(function(data) {
       return configureColors(data, options, type);
    }).then(function(data) {
      var chartReady = $.Deferred();

      if (options.labelsMap) {
        for (var i = 0; i &lt; data.labels.length; i++) {
          if (options.labelsMap.hasOwnProperty(data.labels[i])) {
            data.labels[i] = options.labelsMap[data.labels[i]]
          }
        }
      }

      // Special tooltips for pies and doughnuts with multiple data sets
      if ((type == "pie" || type == "doughnut") &amp;&amp; data.datasets.length &gt; 1) {
        options.tooltips = {
          callbacks: {
            title: function(tooltipItem, data) {
                var datasetIndex = tooltipItem[0].datasetIndex;
                var title = data.datasets[datasetIndex].label;
                return title;
              }
          }
        }
      }

      if (options.tooltips &amp;&amp; options.tooltips.maxCharactersPerLine) {

        function splitIntoLinesOfWords(value, maxCharactersPerLine) {
          var lines = [];
          // If value is not a string (e.g. an array in case the label is already splitted into multiple elements),
          // return it as is.
          if (typeof value != 'string')
            return value;
          var words = value.split(/\s/);
          var currentLine = words[0];
          var lineLength = currentLine.length;
          for (var i = 1; i &lt; words.length; i++) {
            var word = words[i];
            lineLength += word.length + 1;
            if (lineLength &lt;= maxCharactersPerLine) {
              currentLine += " " + word;
            } else {
              lines.push(currentLine);
              currentLine = word;
              lineLength = word.length;
            }
          }
          lines.push(currentLine);
          return lines;
        }

        var maxCharactersPerLine = options.tooltips.maxCharactersPerLine;
        options.tooltips = options.tooltips || {};
        options.tooltips.callbacks =  options.tooltips.callbacks || {};
        options.tooltips.callbacks.title = function(tooltipItem, data) {
            var title = data.labels[tooltipItem[0].index] || '';
            var lines = splitIntoLinesOfWords(title, maxCharactersPerLine);
            return lines;
        }
      }

      // Compute the point where the tooltip shows up from option parameters, if any.
      if (options.tooltips &amp;&amp; options.tooltips.position) {
        var xCoefficient = options.tooltips.position.left;
        var yCoefficient = options.tooltips.position.bottom;
        if (xCoefficient || yCoefficient) {
          options.tooltips.position = 'custom';
          Chart.Tooltip.positioners.custom = function(elements, eventPosition) {
            // Initialize custom {x, y} to average
            var customX = Chart.Tooltip.positioners.average(elements).x;
            var customY = Chart.Tooltip.positioners.average(elements).y;

            // Compute custom {x, y} if custom coefficient were provided
            if (!isNaN(xCoefficient) &amp;&amp; this._chart &amp;&amp; this._chart.width) {
              customX = Math.round(xCoefficient * this._chart.width);
            }
            if (!isNaN(yCoefficient) &amp;&amp; this._chart &amp;&amp; this._chart.height) {
              customY = Math.round(yCoefficient * this._chart.height);
            }
            return {
              x: customX,
              y: customY
            };
          }
        }
      }

      var chartPlugins = [];

      if (!options.plugins) {
        // In case there is no plugin in the options, we need to make sure that the datalabels library does not
        // override the default behaviour of chartjs for displaying data labels.
        Chart.defaults.global.plugins.datalabels.display = false;
      } else if (options.plugins.datalabels) {
        Chart.defaults.global.plugins.datalabels.display = true;
        // if the legend is included, compute it and display it
        if (options.plugins.datalabels.includeLegend) {
          options.plugins.datalabels.formatter = function(value, context) {
            var legendItem = context.chart.legend.legendItems[context.dataIndex];
            if (legendItem) {
              var text = legendItem.text;
              var afterValue = options.afterValue;
              if (options.afterValue) {
                value = value + '' + options.afterValue;
              }
              return text + '\n' + value;
            }
            return value;
          }
        } else {
          // if an after value is configured, add the after value
          if (options.localization !== undefined || options.afterValue !== undefined) {
            options.plugins.datalabels.formatter = function(value, context) {
              if (options.localization !== undefined)
                value = parseFloat(value).toLocaleString(options.localization.locale, options.localization.options);
              if (options.afterValue !== undefined)
                return '' + value + options.afterValue;
            }
          }
        }
        // take into account the compute and display of the total numbers in the datalabels, particularily useful for a stacked chart
        if (options.plugins.datalabels.computeTotals) {
          // code from: https://jsfiddle.net/simonbrunel/9ezggxx5/ from https://github.com/chartjs/chartjs-plugin-datalabels/issues/16
          // 1. define the plugins variable, with a totalizer plugin to compute the totals upon load of the table
          chartPlugins.push({
            id: 'totalizer',

            beforeUpdate: function(chart) {
              var totals = {};
              var utmost = 0;

              chart.data.datasets.forEach(function(dataset, datasetIndex) {
                if (chart.isDatasetVisible(datasetIndex)) {
                  utmost = datasetIndex
                  dataset.data.forEach(function(value, index) {
                    totals[index] = (totals[index] || 0) + parseFloat(value);
                  });
                }
              });

              chart.totalizer = {totals: totals, utmost: utmost};
            }
          });
          // 2. add configurations to the datalabels plugin to display the totals properly for the currently displayed dataset
          options.plugins.datalabels.formatter = function(value, ctx) {
            var total = "" + ctx.chart.totalizer.totals[ctx.dataIndex];
            // if an after value is configured, add it as well in the total values label
            if (options.afterValue) {
              total += options.afterValue;
            }
            return total;
          };
          options.plugins.datalabels.display = function(ctx) {
            return ctx.datasetIndex === ctx.chart.totalizer.utmost;
          };
        }
      }

      // If there is a legend that is displayed on top, add a small padding between the legend and the chart
      // solution from https://stackoverflow.com/a/53153992
      // use a custom extension to get the padding to set
      if (options.legend !== undefined &amp;&amp; options.legend.display != false &amp;&amp; options.legend.position == 'top' &amp;&amp; options.legend.x_padding) {
        chartPlugins.push({
          beforeInit: function(chart, ctx) {
            chart.legend.afterFit = function() {
              this.height = this.height + parseInt(options.legend.x_padding);
            };
          }
        });
      }
      if (options.localization !== undefined || options.afterValue !== undefined) {
        options.tooltips = options.tooltips || {};
        options.tooltips.callbacks =  options.tooltips.callbacks || {};
        options.tooltips.callbacks.label = function(tooltipItem, data) {
          var dataSet = data.datasets[tooltipItem.datasetIndex];
          var value = dataSet.data[tooltipItem.index];
          var label = dataSet.label;
          if (options.localization !== undefined) {
            value = parseFloat(value).toLocaleString(options.localization.locale, options.localization.options);
          }
          return  label + ': ' + value + '' + (options.afterValue || '');
        }
      }

      // Handle the 'afterValue' option for ticks, when it exists: add a string
      // after each tick value, typically a percent or a currency sign.
      // TODO: fix access to deep nested values, see https://medium.com/javascript-inside/safely-accessing-deeply-nested-values-in-javascript-99bf72a0855a
      function configureTicksCallback(axesName) {
        if (options.scales &amp;&amp; options.scales[axesName] &amp;&amp; options.scales[axesName][0] &amp;&amp; options.scales[axesName][0].ticks &amp;&amp; options.scales[axesName][0].ticks.afterValue) {
          var afterValue = options.scales[axesName][0].ticks.afterValue;
          options.scales[axesName][0].ticks.callback = function(value, index, values) {
            return value + '' + afterValue;
          }
        }
      }

      configureTicksCallback('xAxes');
      configureTicksCallback('yAxes');

      options.animation = $.extend(options.animation, {
        // See https://www.chartjs.org/docs/latest/configuration/animations.html#animation-callbacks
        onComplete: function(animation) {
          chartReady.resolve(chart);
        }
      });

      var chart = new Chart(canvas, {
        type: type,
        data: data,
        options: options,
        plugins: chartPlugins
      });

      // See: https://www.chartjs.org/docs/latest/general/responsive.html
      if (options.width) {
        chart.canvas.parentNode.style.width = options.width;
      }
      if (options.height) {
        chart.canvas.parentNode.style.height = options.height;
      }

      // If the table is hidden, move it to the canvas element and show it so that it can be read
      // by screen readers (screen readers ignore hidden elements).
      var table = $('table#' + data.table);
      if (table.hasClass('hidden')) {
        table.appendTo(canvas);
        table.removeClass('hidden');
      }

      return chartReady.promise();
    });
  };

  var maybeDelayPageReady = function(promise, reason) {
    if (require.defined('xwiki-page-ready')) {
      require(['xwiki-page-ready'], function(pageReady) {
        pageReady.delayPageReady(Promise.resolve(promise), reason);
      });
    }
  };

  var init = function(root) {
    root.find('canvas.chart').each(function() {
      maybeDelayPageReady(createChart($(this)), 'chart.js');
    });
  }

  // Init the whole document once.
  init($(document));

  // Re-init updated sub-parts of the document.
  $(document).on('xwiki:dom:updated', function(event, data) {
    // Limit the init to the updated content only.
    var container = $((data &amp;&amp; data.elements) || document);
    init(container);
  });
});</code>
    </property>
    <property>
      <name>JSX</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>64147509-67e8-464e-9a3e-38aace06c39d</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.chart-container {
  max-width: 100%;
  position: relative;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>SSX</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>0</number>
    <className>XWiki.WikiMacroClass</className>
    <guid>83b622b0-34eb-41dd-8dc1-d277d4e3cae3</guid>
    <class>
      <name>XWiki.WikiMacroClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>11</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>12</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>10</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <code>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>code</name>
        <number>9</number>
        <prettyName>Macro code</prettyName>
        <rows>20</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentDescription>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>contentDescription</name>
        <number>8</number>
        <prettyName>Content description (Not applicable for "No content" type)</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </contentDescription>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>7</number>
        <prettyName>Macro content type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Optional|Mandatory|No content</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <defaultCategory>
        <disabled>0</disabled>
        <name>defaultCategory</name>
        <number>4</number>
        <prettyName>Default category</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultCategory>
      <description>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>description</name>
        <number>3</number>
        <prettyName>Macro description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <id>
        <disabled>0</disabled>
        <name>id</name>
        <number>1</number>
        <prettyName>Macro id</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </id>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Macro name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <supportsInlineMode>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>supportsInlineMode</name>
        <number>5</number>
        <prettyName>Supports inline mode</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </supportsInlineMode>
      <visibility>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>visibility</name>
        <number>6</number>
        <prettyName>Macro visibility</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>|</separator>
        <separators>|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Current User|Current Wiki|Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </visibility>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <code>{{velocity}}
{{html clean="false"}}
#set ($discard = $xwiki.ssx.use($xcontext.macro.doc))
#set ($discard = $xwiki.jsx.use($xcontext.macro.doc, {'wysiwyg': true}))
#set ($cssClass = "$!escapetool.xml($xcontext.macro.params.cssClass)")
#set ($id = "$!escapetool.xml($xcontext.macro.params.id)")
#set ($title = "$!escapetool.xml($xcontext.macro.params.title)")
#set ($cssClasses = 'chart-container')
#if ($cssClass != '')
  #set ($cssClasses = "$cssClasses $cssClass")
#end
&lt;div class="$cssClasses"&gt;
  &lt;canvas
    #if($id != '')id="$id"#end
    #if($title != '')aria-label="$title"#end
    class="chart"
    data-type="$!escapetool.xml($xcontext.macro.params.type)"
    data-options="$!escapetool.xml($xcontext.macro.params.options)"
    data-source="$!escapetool.xml($xcontext.macro.content)"
    width="$!escapetool.xml($xcontext.macro.params.width)"
    height="$!escapetool.xml($xcontext.macro.params.height)"
    role="img"&gt;
  &lt;/canvas&gt;
&lt;/div&gt;
{{/html}}
{{/velocity}}</code>
    </property>
    <property>
      <contentDescription>The chart data.</contentDescription>
    </property>
    <property>
      <contentType>Mandatory</contentType>
    </property>
    <property>
      <defaultCategory>Content</defaultCategory>
    </property>
    <property>
      <description>Simple HTML5 charts using the canvas element.</description>
    </property>
    <property>
      <id>chartjs</id>
    </property>
    <property>
      <name>ChartJS</name>
    </property>
    <property>
      <supportsInlineMode>0</supportsInlineMode>
    </property>
    <property>
      <visibility>Current Wiki</visibility>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>0</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>ef157fce-6efb-40ff-bb37-bd8f9ca7bafc</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>The type of chart. Choose from: line, bar, (% class="hljs-string" %)radar(%%), pie,(% class="hljs-string" %) doughnut, polarArea, bubble, scatter.</description>
    </property>
    <property>
      <mandatory>1</mandatory>
    </property>
    <property>
      <name>type</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>1</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>3fa49957-d994-48a4-b7a9-9bc3b5fb383d</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Advanced options specified as JSON. Checkout the [[Chart.js documentation&gt;&gt;http://www.chartjs.org/docs/latest/]] for the available configuration options. In addition to the options that can be defined in the standard ChartJS library, the following options can be used in this macro:

|##"opacity": 0.8##|Makes it possible to define an opacity level for all the background colors.
|##"width": "400px"##|Overrides the chart container width that gets computed automatically.
|##"height": "400px"##|Overrides the chart's container height that gets computed automatically. If used in combination with the ##width## option, the option ##maintainAspectRatio## has to be set to ##false## for both options to be taken into account.
|##"backgroundColors": ["#ff16e8", "#0018f4","#065d00"]##|For charts of type line, bar, horizontalBar or radar, this option makes it possible to define one background color per data set or one per value, withtout the need to define the colors for each data set individually.
|##"afterValue": "%"##|Suffixes the data label values with the given sign or string (e.g. "%", "€", etc.).
|##"options.scales.xAxes[0].ticks.afterValue: "%"##|(Same for yAxes) suffixes the data labels with the given string.
|##"skipZeros": true##|Instructs the macro to not display values equalling to 0.
|##"tooltips": {"maxCharactersPerLine": 50}##In case of long data labels, this option makes it possible to display the full data label in the tooltips, on several lines.
##"tooltips": {"position": {"left": 0.5, "bottom": 0.2}}##|Allows to position the tooltips at a specific position of the canvas computed as the canvas' width or height multiplied by the given value (of "left" or "bottom"). If no value is provided, the "average" positioner is used.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>options</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>4</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>be52be75-f2e6-41d8-9c3c-68f53e9621b9</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <disabled>0</disabled>
        <name>type</name>
        <number>5</number>
        <prettyName>Parameter type</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </type>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Additional CSS class to be added to the chart container. It can be useful in particular for setting the canvas dimensions at the CSS level.</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>cssClass</name>
    </property>
    <property>
      <type/>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>5</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>d9bf2576-b1bd-4dd1-9a43-ffe07fdff0c3</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Chart title, added as aria-label to the generated canvas</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>title</name>
    </property>
  </object>
  <object>
    <name>XWiki.ChartJS.WebHome</name>
    <number>6</number>
    <className>XWiki.WikiMacroParameterClass</className>
    <guid>3f4d9ef8-6d6e-4f95-ae6d-daf74ddaf898</guid>
    <class>
      <name>XWiki.WikiMacroParameterClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <defaultValue>
        <disabled>0</disabled>
        <name>defaultValue</name>
        <number>4</number>
        <prettyName>Parameter default value</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultValue>
      <description>
        <disabled>0</disabled>
        <name>description</name>
        <number>2</number>
        <prettyName>Parameter description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <mandatory>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>mandatory</name>
        <number>3</number>
        <prettyName>Parameter mandatory</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </mandatory>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Parameter name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
    </class>
    <property>
      <defaultValue/>
    </property>
    <property>
      <description>Chart identifier</description>
    </property>
    <property>
      <mandatory>0</mandatory>
    </property>
    <property>
      <name>id</name>
    </property>
  </object>
</xwikidoc>
